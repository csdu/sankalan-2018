{"version":3,"sources":["header.js","canvas.js","router.js"],"names":[],"mappingspfile":"bundle.js","sourcesContent":["/**\n * @preserve\n * Developed by Sudhanshu Vishnoi\n * (https://github.com/sidvishnoi)\n * Copyright 2018\n */\n\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag() {\n  dataLayer.push(arguments);\n}\nconst GA_TRACKING_ID = 'UA-113942220-1';\n\n// print that status message in console :D\nconst pprint = {\n  ct: `${'\\u00a0'.repeat(13)}Hey you, Hackerman!${'\\u00a0'.repeat(16)}\n${'\\u00a0'.repeat(2)}I see you are interested in the source code.${'\\u00a0'.repeat(2)}\n${'\\u00a0'.repeat(13)}Let me help you :)${'\\u00a0'.repeat(17)}`,\n  st: 'background: #bada55;color:#000;font-weight: bold;',\n};\nconsole.log(`%c${pprint.ct}`, pprint.st);\nconsole.log(`%c${'\\u00a0'.repeat(1)}https://github.com/sidvishnoi/sankalan-2018${'\\u00a0'.repeat(2)}`, 'color: yellow;padding:4px;background:#000');\n\nconst isFrontPage = () =>\n  window.location.pathname.replace('index.html', '') === '/sankalan-2018/';\n\nif (isFrontPage()) {\n  document.body.classList.add('is-front-page');\n}\n","/* eslint no-param-reassign: [\"error\", {\n  \"props\": true,\n  \"ignorePropertyModificationsFor\": [\"line\"],\n}] */\n\nclass Background {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.canvas.style.background = '#000';\n    this.ctx = canvas.getContext('2d');\n    this.polylines = [];\n    this.frameCount = 0;\n\n    const TAU = Math.PI * 2;\n    const ISO_ANGLE = TAU * (45 / 360);\n    this.ANGLES = [ISO_ANGLE, -ISO_ANGLE, Math.PI - ISO_ANGLE, Math.PI + ISO_ANGLE];\n    this.NUM_LINES = 10;\n    this.NUM_SEGMENT = 8;\n    this.SEGMENT_LENGTH = 120;\n    this.RESET_FACTOR = 5;\n  }\n\n  // convert {r,g,b} to rgba string\n  static createRgbString(color) {\n    return `rgb(${color.r},${color.g},${color.b})`;\n  }\n\n  // random integer in range [0, m)\n  static randomInt(m) {\n    return Math.floor(Math.random() * m);\n  }\n\n  /**\n   * Build or reset a line with a random color and empty points.\n   */\n  buildLine(line) {\n    const obj = line || {};\n    obj.color = {};\n    obj.color.r = this.constructor.randomInt(3 * 64);\n    obj.color.g = this.constructor.randomInt(2 * 64);\n    obj.color.b = this.constructor.randomInt(4 * 64);\n    obj.points = [];\n    return obj;\n  }\n\n  /**\n   * Random isometric angle\n   */\n  nextAngle() {\n    const idx = this.constructor.randomInt(this.ANGLES.length);\n    return this.ANGLES[idx];\n  }\n\n\n  /**\n  * Next point is a random point within four angles from the start.\n  * @param line the array of points to add to.\n  * @param i the last index to start from\n  * @param point the default starting point.\n  */\n  getNextPoint(line, i, point) {\n    const nextPoint = point || {};\n    line.angle = this.nextAngle(line.angle);\n    nextPoint.x = line.points[i - 1].x + (Math.cos(line.angle) * this.SEGMENT_LENGTH);\n    nextPoint.y = line.points[i - 1].y + (Math.sin(line.angle) * this.SEGMENT_LENGTH);\n    line.points.push(nextPoint);\n  }\n\n  /**\n   * Init a polyline\n   */\n  initPolyLine(line) {\n    line.points.push({\n      x: this.constructor.randomInt(this.canvas.width),\n      y: this.constructor.randomInt(this.canvas.height),\n    });\n    for (let i = 1; i < this.NUM_SEGMENT; i += 1) {\n      this.getNextPoint(line, i);\n    }\n    return line;\n  }\n\n  /**\n   * Draw a line on the canvas.\n   */\n  drawLine(line) {\n    this.ctx.strokeStyle = this.constructor.createRgbString(line.color);\n    for (let i = 1; i < line.points.length; i += 1) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(line.points[i - 1].x, line.points[i - 1].y);\n      this.ctx.lineTo(line.points[i].x, line.points[i].y);\n      this.ctx.stroke();\n    }\n  }\n\n  /**\n   * check if point is inside the canvas region\n   */\n  isPointInside(point) {\n    return (point.y > 0\n      && point.y < this.canvas.height\n      && point.x < this.canvas.width\n      && point.x > 0);\n  }\n\n  // reset a line\n  resetLine(line) {\n    const idx = this.polylines.indexOf(line);\n    const removedLine = this.polylines.splice(idx, 1)[0];\n    const newLine = this.buildLine(removedLine); // reset the line\n    const newPolyline = this.initPolyLine(newLine);\n    this.polylines.push(newPolyline);\n  }\n\n  /**\n   * make a line move down\n   */\n  moveLine(line) {\n    for (let i = 0; i < line.points.length; i += 1) {\n      line.points[i].y += 0.01;\n    }\n    // check if point is out of view\n    const pointsInside = line.points.filter(l => this.isPointInside(l));\n\n    // if line has no point in view, reset it\n    if (pointsInside.length === 0) {\n      this.resetLine(line);\n    }\n  }\n\n  /**\n   * Makes the lines go down.\n   */\n  move() {\n    for (const line of this.polylines) {\n      this.moveLine(line);\n    }\n  }\n\n  /**\n  * Removes first point from the line and add a new one.\n  */\n  shiftPoint(line) {\n    const firstPoint = line.points.shift();\n    this.getNextPoint(line, line.points.length, firstPoint);\n  }\n\n  /**\n   * starts animation\n   */\n  animate() {\n    this.canvas.width = this.canvas.width; // clear canvas\n\n    // draw\n    this.move();\n    for (const line of this.polylines) {\n      this.drawLine(line);\n    }\n\n    if (this.frameCount % this.RESET_FACTOR === 0) {\n      this.frameCount = 0;\n      for (const line of this.polylines) {\n        this.shiftPoint(line);\n      }\n    }\n    this.frameCount += 1;\n    return window.requestAnimationFrame(this.anim);\n  }\n\n  /**\n   * Resize canvas to viewport dimensions.\n   */\n  resize() {\n    this.canvas.width = window.innerWidth;\n    this.canvas.height = window.innerHeight;\n  }\n\n  init() {\n    for (let i = 0; i < this.NUM_LINES; i += 1) {\n      const line = this.buildLine();\n      this.polylines.push(line);\n    }\n    for (let i = 0, l = this.polylines.length; i < l; i += 1) {\n      this.initPolyLine(this.polylines[i]);\n    }\n    // .forEach(this.initPolyLine);\n    this.anim = this.animate.bind(this);\n    this.resize();\n    this.animate();\n    window.addEventListener('resize', this.resize);\n  }\n}\n\nconst $canvas = document.getElementById('canvas');\nconst bg = new Background($canvas);\nbg.init();\n","/* global loadJs gtag GA_TRACKING_ID */\n\nlet initLoader;\nlet trackClicks;\nconst maxDelay = 600; // if request takes more than this much ms, we won't show user the \"loading\"\nlet reqStartTime;\n\nconst changeHistory = (page) => {\n  document.title = page.title;\n  window.history.pushState(page, page.title, page.link);\n};\n\nconst showLoader = () => {\n  document.body.classList.add('loading');\n};\n\nconst hideLoader = (callback = () => {}) => {\n  let delay = new Date() - reqStartTime;\n  if (delay > maxDelay) {\n    delay = 0;\n  } else {\n    delay = maxDelay - delay;\n  }\n  window.setTimeout(() => {\n    document.body.classList.remove('loading');\n    callback();\n  }, delay);\n};\n\nconst showContent = (json) => {\n  const main = document.getElementById('main');\n  const isHomePage = json.slug === '';\n  if (isHomePage) {\n    document.body.classList.add('is-front-page');\n  } else {\n    document.body.classList.remove('is-front-page');\n  }\n  if (!json.link) throw new Error('bad content');\n\n  window.scrollTo(0, 0);\n  hideLoader(() => {\n    main.innerHTML = json.content;\n    initLoader();\n    trackClicks();\n  });\n\n  // track page view\n  gtag('config', GA_TRACKING_ID, {\n    page_title: json.title,\n    page_path: json.link,\n  });\n\n  return json;\n};\n\nconst setURL = (href) => {\n  const path = href.split(window.location.host)[1];\n  window.history.replaceState(window.history.state, document.title, path);\n};\n\nconst loadPage = (href) => {\n  const pastUrl = window.location.href;\n  // change url so that slow requests don't lead to full page reload (due to trackClicks() callback)\n  setURL(href);\n\n  const parseResponse = (res) => {\n    const contentType = res.headers.get('Content-Type');\n    if (!res.ok) {\n      return Promise.reject(new Error(res.statusCode));\n    } else if (!contentType.includes('application/json')) {\n      return Promise.reject(new Error('invalid response'));\n    }\n    return Promise.resolve(res.json());\n  };\n\n  const cacheResponse = (json) => {\n    const localStorageKey = href.split(window.location.host)[1];\n    window.localStorage.setItem(localStorageKey, JSON.stringify(json));\n    window.localStorage.setItem(`t-${localStorageKey}`, new Date().valueOf());\n    return Promise.resolve(json);\n  };\n\n  const handleLoadError = (err) => {\n    console.error(err);\n    setURL(pastUrl); // reset url and history\n    hideLoader();\n  };\n\n  let url = href;\n  if (url.substr(-1) === '/') {\n    url += 'index.json';\n  } else if (url.endsWith('/index.json')) {\n    /* do nothing */\n  } else {\n    url += '/index.json'; // when url ends without a trailing slash\n  }\n\n  // get from local storage if available and appropriate\n  const localStorageKey = href.split(window.location.host)[1];\n  const t = window.localStorage.getItem(`t-${localStorageKey}`);\n  const lastFetchTime = new Date(parseInt(t, 10));\n  if (new Date() - lastFetchTime < 300 * 1000) { // cache time 5min\n    const json = JSON.parse(window.localStorage.getItem(localStorageKey));\n    return new Promise(resolve => resolve(json))\n      .then(showContent)\n      .then(changeHistory)\n      .then(initLoader)\n      .catch(handleLoadError);\n  }\n\n  return window.fetch(url)\n    .then(parseResponse)\n    .then(cacheResponse)\n    .then(showContent)\n    .then(changeHistory)\n    .then(initLoader)\n    .catch(handleLoadError);\n};\n\nwindow.onpopstate = ({ state }) => {\n  if (!state || !state.link) {\n    window.location.href = window.location.href;\n  }\n\n  reqStartTime = new Date().valueOf() + 250;\n  const { link } = state;\n  showLoader();\n  setURL(window.location.host + link);\n  showContent(state);\n};\n\nconst loaderListener = (e) => {\n  e.preventDefault();\n  const target = e.target.closest('a');\n  if (e.ctrlKey) {\n    window.open(target.href, '_blank');\n    return;\n  }\n  reqStartTime = new Date();\n  showLoader();\n  loadPage(target.href);\n};\n\ninitLoader = () => {\n  const links = document.querySelectorAll('a.xhr');\n\n  for (const link of links) {\n    link.removeEventListener('click', loaderListener, true);\n    const { href } = link;\n    const relHref = href.replace(`${window.location.protocol}//${window.location.host}`, '');\n    if (relHref === href) {\n      continue; // is external\n    }\n    if (href === window.location.href) {\n      link.addEventListener('click', e => e.preventDefault());\n      continue;\n    }\n    link.addEventListener('click', loaderListener, true);\n  }\n};\n\n// track all clicks\ntrackClicks = () => {\n  const links = document.querySelectorAll('a');\n  const isExternal = url =>\n    !url.includes(window.location.host);\n\n  const fn = (e) => {\n    e.preventDefault();\n    let done = false;\n    const target = e.target.closest('a');\n    const label = target.dataset.id || target.innerText;\n    const { href } = target;\n    const action = href.split(window.location.host)[1] || href;\n    const callback = () => {\n      if (!done && document.location.href !== href && !target.classList.contains('xhr')) {\n        if (target.getAttribute('target') === '_blank' || e.ctrlKey) {\n          window.open(href, '_blank');\n        } else {\n          document.location.href = href;\n        }\n      }\n      done = true;\n    };\n    const props = {\n      event_category: 'Click Open',\n      event_label: label,\n      event_callback: callback,\n    };\n    if (isExternal(href)) {\n      if (!done) setTimeout(callback, 1000);\n      props.transport_type = 'beacon';\n    }\n    gtag('event', action, props);\n  };\n\n  for (const link of links) {\n    link.addEventListener('click', fn, false);\n  }\n};\n\ninitLoader();\ntrackClicks();\n\n// google analytics\nloadJs('https://www.googletagmanager.com/gtag/js?id=UA-113942220-1');\n\ngtag('js', new Date());\n\ngtag('config', GA_TRACKING_ID);\n"]}